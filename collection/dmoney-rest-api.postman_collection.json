{
	"info": {
		"_postman_id": "f09cdd63-3911-40ea-914e-e7ee5ffc3364",
		"name": "dmoney-rest-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42658721",
		"_collection_link": "https://www.postman.com/descent-module-participant-40276949/workspace/my-workspace/collection/42658721-f09cdd63-3911-40ea-914e-e7ee5ffc3364?action=share&source=collection_link&creator=42658721"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse=pm.response.json();\r",
									"pm.collectionVariables.set(\"token\",jsonResponse.token)\r",
									"\r",
									"pm.test(\"Verify user login is successful\", function(){\r",
									"    pm.expect(jsonResponse.message).contains(\"Login successful\")\r",
									"    \r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Login with wrong creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse=pm.response.json();\r",
									"\r",
									"pm.test(\"Verify user cant login with wrong creds\", function(){\r",
									"    pm.expect(jsonResponse.message).contains(\"Password incorrect\")\r",
									"    \r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create User",
			"item": [
				{
					"name": "Create new Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse=pm.response.json();\r",
									"const agentId= jsonResponse.user.id\r",
									"pm.collectionVariables.set(\"agentId\",agentId)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"\tpm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash=require('lodash')\r",
									"\r",
									"const prefix=\"0120\"\r",
									"const randomNumber= lodash.random(1000000,9999999)\r",
									"const agentPhoneNumber=prefix+randomNumber;\r",
									"pm.collectionVariables.set(\"agentPhoneNumber\",agentPhoneNumber)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"1234\",\r\n  \"phone_number\": \"{{agentPhoneNumber}}\",\r\n  \"nid\": \"123456789\",\r\n  \"role\": \"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Customer1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse=pm.response.json();\r",
									"const customerId= jsonResponse.user.id\r",
									"pm.collectionVariables.set(\"customerId\",customerId)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"\tpm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash=require('lodash')\r",
									"\r",
									"const prefix=\"0120\"\r",
									"const randomNumber= lodash.random(1000000,9999999)\r",
									"const customer1PhoneNumber=prefix+randomNumber;\r",
									"pm.collectionVariables.set(\"customer1PhoneNumber\",customer1PhoneNumber)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"1234\",\r\n  \"phone_number\": \"{{customer1PhoneNumber}}\",\r\n  \"nid\": \"123456789\",\r\n  \"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Customer2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse=pm.response.json();\r",
									"const customerId= jsonResponse.user.id\r",
									"pm.collectionVariables.set(\"customerId\",customerId)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"\tpm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash=require('lodash')\r",
									"\r",
									"const prefix=\"0120\"\r",
									"const randomNumber= lodash.random(1000000,9999999)\r",
									"const customer2PhoneNumber=prefix+randomNumber;\r",
									"pm.collectionVariables.set(\"customer2PhoneNumber\",customer2PhoneNumber)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"1234\",\r\n  \"phone_number\": \"{{customer2PhoneNumber}}\",\r\n  \"nid\": \"123456789\",\r\n  \"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse=pm.response.json();\r",
									"const merchantId= jsonResponse.user.id\r",
									"pm.collectionVariables.set(\"merchantId\",merchantId)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"\tpm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash=require('lodash')\r",
									"\r",
									"const prefix=\"0120\"\r",
									"const randomNumber= lodash.random(1000000,9999999)\r",
									"const merchantPhoneNumber=prefix+randomNumber;\r",
									"pm.collectionVariables.set(\"merchantPhoneNumber\",merchantPhoneNumber)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"1234\",\r\n  \"phone_number\": \"{{merchantPhoneNumber}}\",\r\n  \"nid\": \"123456789\",\r\n  \"role\": \"Merchant\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new User with missing field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse=pm.response.json();\r",
									"\r",
									"pm.test(\"Create user with missing field\", function(){\r",
									"    pm.expect(jsonResponse.message).contains(\"Error creating user\")\r",
									"    \r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"password\": \"1234\",\r\n  \"phone_number\": \"{{customer1PhoneNumber}}\",\r\n  \"nid\": \"123456789\",\r\n  \"role\": \"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify user cant created with existing email\",()=>{\r",
									"    const responseData=pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"User already exists\")\r",
									"})\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"email\": \"Richmond_OConner@gmail.com\",\r\n  \"password\": \"1234\",\r\n  \"phone_number\": \"{{customer2PhoneNumber}}\",\r\n  \"nid\": \"123456789\",\r\n  \"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "Deposit",
					"item": [
						{
							"name": "Deposit from System to Agent less than 10tk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify agent deposit with minimum limit\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Minimum deposit amount is 10 tk and maximum deposit amount is 10000 tk\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"\tpm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agentPhoneNumber}}\",\r\n  \"amount\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit from System to Agent more than 10,000tk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify agent deposit with maximum limit\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Limit exceeded. You can deposit a maximum of 10000.00 tk to this customer.\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"\tpm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agentPhoneNumber}}\",\r\n  \"amount\": 120000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit from System to Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify agent deposit from System\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Deposit successful\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"\tpm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agentPhoneNumber}}\",\r\n  \"amount\": 10000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Agent Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Agent balance\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"User balance\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{agentPhoneNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{agentPhoneNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit from Agent to Customer1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify successful Deposit from Agent to Customer1\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Deposit successful\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"\tpm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agentPhoneNumber}}\",\r\n  \"to_account\": \"{{customer1PhoneNumber}}\",\r\n  \"amount\": 5000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit from Agent to Customer1 with Insufficient balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Unsuccessful Deposit from Agent to Customer1\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Insufficient balance\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"\tpm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agentPhoneNumber}}\",\r\n  \"to_account\": \"{{customer1PhoneNumber}}\",\r\n  \"amount\": 20000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Send Money",
					"item": [
						{
							"name": "Send Money from Customer1 to Customer2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify successful Send Money from Customer1 to Customer2\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Send money successful\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"\tpm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1PhoneNumber}}\",\r\n  \"to_account\": \"{{customer2PhoneNumber}}\",\r\n  \"amount\": 2000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Money from Customer1 to Customer2 with Insufficient balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Unsuccessful Send Money from Customer1 to Customer2\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Insufficient balance\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"\tpm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1PhoneNumber}}\",\r\n  \"to_account\": \"{{customer2PhoneNumber}}\",\r\n  \"amount\": 50000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Withdraw",
					"item": [
						{
							"name": "Withdraw from Customer1 to Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"const trnxId= jsonResponse.trnxId\r",
											"pm.collectionVariables.set(\"trnxId\",trnxId)\r",
											"\r",
											"pm.test(\"Verify Successful Withdraw from Customer1 to Agent\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Withdraw successful\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"\tpm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1PhoneNumber}}\",\r\n  \"to_account\": \"{{agentPhoneNumber}}\",\r\n  \"amount\": 1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check the Customer1 balance and transaction statement by trnxId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Customer1 balance and transaction statement by trnxId\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Transaction list\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/search/{{trnxId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"search",
										"{{trnxId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check the Customer1 transaction statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Customer1 transaction statement\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Transaction list\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/statement/{{customer1PhoneNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"statement",
										"{{customer1PhoneNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw from Customer1 to Agent with Insufficient balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Unsuccessful Withdraw from Customer1 to Agent\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Insufficient balance\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"\tpm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1PhoneNumber}}\",\r\n  \"to_account\": \"{{agentPhoneNumber}}\",\r\n  \"amount\": 30000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "Payment from Customer2 to Merchant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify successful Payment from Customer2 to Merchant\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Payment successful\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"\tpm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2PhoneNumber}}\",\r\n  \"to_account\": \"{{merchantPhoneNumber}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Customer2 Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Customer2 balance\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"User balance\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{customer2PhoneNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{customer2PhoneNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check the Customer2 transaction statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Customer2 transaction statement\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Transaction list\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/statement/{{customer2PhoneNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"statement",
										"{{customer2PhoneNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment from Customer2 to Merchant with Insufficient balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Unsuccessful Payment from Customer2 to Merchant\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Insufficient balance\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"\tpm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2PhoneNumber}}\",\r\n  \"to_account\": \"{{merchantPhoneNumber}}\",\r\n  \"amount\": 20000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Merchant Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Merchant balance\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"User balance\")\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{merchantPhoneNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{merchantPhoneNumber}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "{{vault:json-web-token}}"
		},
		{
			"key": "baseUrl",
			"value": "http://dmoney.roadtocareer.net"
		},
		{
			"key": "customerId",
			"value": 68639
		},
		{
			"key": "customer1PhoneNumber",
			"value": "01204434647"
		},
		{
			"key": "customer2PhoneNumber",
			"value": "01208512211"
		},
		{
			"key": "secretKey",
			"value": "ROADTOSDET"
		},
		{
			"key": "agentId",
			"value": 68637
		},
		{
			"key": "agentPhoneNumber",
			"value": "01202306968"
		},
		{
			"key": "merchantId",
			"value": 68640
		},
		{
			"key": "merchantPhoneNumber",
			"value": "01207179061"
		},
		{
			"key": "trnxId",
			"value": "TXN18181"
		}
	]
}